diff --git a/node_modules/@tbminiapp/pixi-apng-textures/dist/cjs/apng-textures.js b/node_modules/@tbminiapp/pixi-apng-textures/dist/cjs/apng-textures.js
index b2e88ad..385c36f 100644
--- a/node_modules/@tbminiapp/pixi-apng-textures/dist/cjs/apng-textures.js
+++ b/node_modules/@tbminiapp/pixi-apng-textures/dist/cjs/apng-textures.js
@@ -164,7 +164,8 @@ var APNGLoader = /** @class */ (function () {
      * @param next - callback Function to call when done
      */
     APNGLoader.use = function (resource, next) {
-        if (resource.extension === 'apng' && resource.data) {
+        console.log('APNGLoader.use', resource);
+        if (resource.extension === 'png' && resource.data) {
             try {
                 var url = resource.name || resource.url;
                 Object.assign(resource, registerAPNGTextures(url, APNGLoader.parse(url, resource.data), resource.metadata));
diff --git a/node_modules/@tbminiapp/pixi-apng-textures/dist/esm/apng-textures.js b/node_modules/@tbminiapp/pixi-apng-textures/dist/esm/apng-textures.js
index d130534..6f73552 100644
--- a/node_modules/@tbminiapp/pixi-apng-textures/dist/esm/apng-textures.js
+++ b/node_modules/@tbminiapp/pixi-apng-textures/dist/esm/apng-textures.js
@@ -5,9 +5,9 @@
  * @tbminiapp/pixi-apng-textures is licensed under the MIT License.
  * http://www.opensource.org/licenses/mit-license
  */
-import { ViewableBuffer, BufferResource, Texture, BaseTexture } from '@tbminiapp/pixi-core';
-import { LoaderResource } from '@tbminiapp/pixi-loaders';
-import { MIPMAP_MODES, ALPHA_MODES } from '@tbminiapp/pixi-constants';
+import { ViewableBuffer, BufferResource, Texture, BaseTexture } from '@pixi/core';
+import { LoaderResource } from '@pixi/loaders';
+import { MIPMAP_MODES, ALPHA_MODES } from '@pixi/constants';
 import UPNG from 'upng-js';
 
 /*! *****************************************************************************
@@ -135,7 +135,7 @@ LoaderResource.setExtensionXhrType('apng', LoaderResource.XHR_RESPONSE_TYPE.BUFF
  *
  * @ignore
  */
-var FILE_IDENTIFIER = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];
+var FILE_IDENTIFIER = [97, 99, 84, 76];
 /**
  * Loader plugin for handling apng texture container files.
  *
@@ -157,11 +157,35 @@ var APNGLoader = /** @class */ (function () {
      * @param resource - loader resource that is checked to see if it is a apng file
      * @param next - callback Function to call when done
      */
-    APNGLoader.use = function (resource, next) {
-        if (resource.extension === 'apng' && resource.data) {
+    APNGLoader.use = async function (resource, next) {
+        if (resource.extension === 'png' && resource.data) {
             try {
-                var url = resource.name || resource.url;
-                Object.assign(resource, registerAPNGTextures(url, APNGLoader.parse(url, resource.data), resource.metadata));
+                var url = resource.url
+                var name = resource.name || url;
+                async function fetchFileAsArrayBuffer(url) {
+                    const response = await fetch(url);
+                    if (!response.ok) {
+                      throw new Error(`Failed to fetch file: ${response.status} ${response.statusText}`);
+                    }
+                    const arrayBuffer = await response.arrayBuffer();
+                    const buffer = new Uint8Array(arrayBuffer);
+
+                    if (!APNGLoader.validate(url, buffer)) {
+                        var upngObj = UPNG.decode(buffer);
+                        var pngTextureResource = new APNGTextureResource(resource.data, {
+                            width: upngObj.width || 1,
+                            height: upngObj.height || 1,
+                            framesCount: 1,
+                            delay: 0  // 普通 PNG 的 delay 设置为 0
+                        });
+                        Object.assign(resource, registerAPNGTextures(name, [pngTextureResource], resource.metadata));
+                        next();
+                    } else {
+                        Object.assign(resource, registerAPNGTextures(name, APNGLoader.parse(name, buffer), resource.metadata));
+                        next();
+                    }
+                }
+                await fetchFileAsArrayBuffer(url);
             }
             catch (err) {
                 next(err);
@@ -174,11 +198,7 @@ var APNGLoader = /** @class */ (function () {
       *  parse apng arraybuffer to APNGTextureResource
       *
       */
-    APNGLoader.parse = function (url, arrayBuffer) {
-        var buffer = new Uint8Array(arrayBuffer);
-        if (!APNGLoader.validate(url, buffer)) {
-            return null;
-        }
+    APNGLoader.parse = function (url, buffer) {
         var upngObj = UPNG.decode(buffer);
         var width = upngObj.width, height = upngObj.height, frames = upngObj.frames;
         var rgba = UPNG.toRGBA8(upngObj);
@@ -200,9 +220,9 @@ var APNGLoader = /** @class */ (function () {
     };
     /** Checks whether the arrayBuffer contains a valid *.apng file. */
     APNGLoader.validate = function (url, buffer) {
+        const actLBuffer = buffer.slice(37, 41);
         for (var i = 0; i < FILE_IDENTIFIER.length; i++) {
-            if (buffer[i] !== FILE_IDENTIFIER[i]) {
-                console.error(url + " is not a valid *.apng file!");
+            if (actLBuffer[i] !== FILE_IDENTIFIER[i]) {
                 return false;
             }
         }
